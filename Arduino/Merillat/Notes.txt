Decoding of trace file captured 8/18:
- Instance 1 is North Door
- Instance 2 is South Door
- There appears to be another pair of single messages also on the BUS
  . NDB = 6
  . Instance appears to be both 1 and 2
  . Nothing else in the message changes state during operation
  . Emergency button states?


As of 10/18/2017, going to install:
- Alter RxTest software on Uno to respond, making a simulator
  when a jumper or input is set (so no pgm change needed to just log)
- AnalogObject's Open/Close90Percent are empty -- complete them??

Done:
- Store/retrieve/validate data from EEPROM as good for 4 pairs of Max/Min
- need to display current numeric values from angles; set Min/Max in EEPROM
- jumper/switch input for "enable", otherwise logic won't run
- Have a data logger for when tracing thruster activity
  - currently boots at 250kBaud
  - outputs data in CANKing format (thanks Pete!)
  - can request baud rate change (thanks Pete!)
  - speed improvements, learned on main project
- Fixed consistent timing of CAN message by using 0.4ms FlexiTimer2 to
  constantly check inbound and outbound queues.  Test with professional
  CAN hardware showed shortest message ~0.26ms, but typically 0.44ms+,
  leading to the selection of 0.4ms timer configuration.
- Thruster Tx/Rx accessed via BitObjects, which allow fields too
- Actual state sequence machine for controlling door logic
  - roughed in, using StateMachine.h/cpp
- Confirmed Thruster TX byte order was as expected on the CANBus
- Digital output CAN modules configured to turn off all outputs upon lack of comm
  Send 0x1016.1 = 0x0001012C (Using a Heart Beat message from us at NID 1 @ 90ms and
  they are as 300ms Heartbeat consumers)
- Simulator (CanLogger) now responds to all outputs in a reasonable manner!!!
- Ensure south door tracks closed first (5.3 degrees ahead)
- GUI:
  - Appears to work with Seeed CAN module as long as using FlexiTimer2
  - All CAN inputs are represented (green background on text for Active inputs)
  - represent outputs with symbols
  - 'screen saver' is nothing but a black screen, to prevent burn-in
  - Shows current state and standard timer used in that state showing
    when a fault will be generated if the correct inputs aren't seen
    - fixed issue that screen saver would not restore erroring state
  - activate Touch functions:
    - touch to wake from 'screen saver' mode
    - Long touch for EEPROM configuration screen to set Min/Max values
    - Long touch an Open/Close input request to start sequence
    - when in "MISSING COMMS", touch to see list of all nodes and which are OK vs Not
  - use EEPROM Min/Max to draw angles
  - adde a Jog mode for all movements
  - From Console, show times for each step of last cycle
    allows to see how close to 'failing' each state is (don't make it too tight!)
